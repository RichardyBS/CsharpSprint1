{
  "info": {
    "name": "MottoSprint API - Demonstra√ß√£o Completa",
    "description": "Cole√ß√£o completa para demonstra√ß√£o da API MottoSprint - Desde Java API at√© Notifica√ß√µes .NET",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:5000",
      "type": "string",
      "description": "URL base da API .NET MottoSprint"
    },
    {
      "key": "javaApiUrl",
      "value": "http://52.226.54.155:8080/api",
      "type": "string",
      "description": "URL base da API Java"
    },
    {
      "key": "motoPlaca",
      "value": "ABC1234",
      "type": "string",
      "description": "Placa da moto para testes"
    },
    {
      "key": "notificationId",
      "value": "",
      "type": "string",
      "description": "ID da notifica√ß√£o criada"
    }
  ],
  "item": [
    {
      "name": "üöÄ 1. SETUP - Verifica√ß√µes Iniciais",
      "item": [
        {
          "name": "1.1 Health Check - API .NET",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/swagger/index.html",
              "host": ["{{baseUrl}}"],
              "path": ["swagger", "index.html"]
            },
            "description": "Verifica se a API .NET est√° rodando e acess√≠vel via Swagger"
          }
        },
        {
          "name": "1.2 Test Java API Connection",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{javaApiUrl}}/vagas",
              "host": ["{{javaApiUrl}}"],
              "path": ["vagas"]
            },
            "description": "Testa conectividade com a API Java (esperado: 405 Method Not Allowed - confirma que est√° respondendo)"
          }
        }
      ],
      "description": "Verifica√ß√µes iniciais para confirmar que ambas as APIs est√£o funcionando"
    },
    {
      "name": "üèçÔ∏è 2. CRUD DE MOTOS",
      "item": [
        {
          "name": "2.1 Listar Todas as Motos (Inicial - Vazio)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/motos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "motos"]
            },
            "description": "Lista todas as motos cadastradas. Inicialmente deve retornar vazio."
          }
        },
        {
          "name": "2.2 Criar Nova Moto (Demonstra√ß√£o)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Verifica se a moto foi criada com sucesso",
                  "pm.test('Moto criada com sucesso', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Verifica se HATEOAS est√° presente",
                  "pm.test('HATEOAS links presentes', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('_links');",
                  "    pm.expect(response._links).to.have.property('self');",
                  "    pm.expect(response._links).to.have.property('update');",
                  "    pm.expect(response._links).to.have.property('delete');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"placa\": \"{{motoPlaca}}\",\n  \"modelo\": \"Honda CB600F Hornet\",\n  \"ano\": 2023,\n  \"cor\": \"Azul Met√°lico\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/motos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "motos"]
            },
            "description": "Cria uma nova moto com valida√ß√£o completa. Demonstra:\n- Valida√ß√£o de campos obrigat√≥rios\n- Retorno com HATEOAS\n- Status HTTP correto (201 Created)"
          }
        },
        {
          "name": "2.3 Buscar Moto por Placa",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Moto encontrada', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.placa).to.eql(pm.variables.get('motoPlaca'));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/motos/{{motoPlaca}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "motos", "{{motoPlaca}}"]
            },
            "description": "Busca uma moto espec√≠fica por placa. Demonstra:\n- Busca por ID (placa)\n- Retorno com dados completos\n- Links HATEOAS contextuais"
          }
        },
        {
          "name": "2.4 Listar Todas as Motos (Ap√≥s Cria√ß√£o)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/motos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "motos"]
            },
            "description": "Lista todas as motos novamente para mostrar que a moto foi criada."
          }
        }
      ],
      "description": "Opera√ß√µes CRUD b√°sicas para motos"
    },
    {
      "name": "üîÑ 3. INTEGRA√á√ÉO COM JAVA API",
      "item": [
        {
          "name": "3.1 Mover Moto para Vaga (Comunica√ß√£o .NET ‚Üí Java)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Moto movida com sucesso', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Links HATEOAS atualizados', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response._links).to.have.property('retirar-vaga');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"placa\": \"{{motoPlaca}}\",\n  \"linha\": \"A\",\n  \"coluna\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/motos/moverVaga",
              "host": ["{{baseUrl}}"],
              "path": ["api", "motos", "moverVaga"]
            },
            "description": "DEMONSTRA√á√ÉO PRINCIPAL: Comunica√ß√£o entre .NET e Java API\n\nEste endpoint:\n1. Recebe dados da moto no .NET\n2. Comunica com a API Java para alocar vaga\n3. Atualiza o status da moto\n4. Retorna links HATEOAS atualizados\n\nEvidencia a integra√ß√£o completa entre as duas APIs!"
          }
        },
        {
          "name": "3.2 Verificar Status da Moto (Ap√≥s Mover)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/motos/{{motoPlaca}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "motos", "{{motoPlaca}}"]
            },
            "description": "Verifica o status da moto ap√≥s ser movida para uma vaga. Deve mostrar:\n- idVaga preenchido\n- Links HATEOAS diferentes (retirar-vaga em vez de mover-vaga)"
          }
        },
        {
          "name": "3.3 Retirar Moto da Vaga",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/motos/retirarVaga/{{motoPlaca}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "motos", "retirarVaga", "{{motoPlaca}}"]
            },
            "description": "Remove a moto da vaga, liberando-a para outras motos. Demonstra:\n- Comunica√ß√£o reversa com Java API\n- Atualiza√ß√£o de status\n- Links HATEOAS din√¢micos"
          }
        }
      ],
      "description": "Demonstra√ß√£o da integra√ß√£o entre .NET e Java API"
    },
    {
      "name": "üì¢ 4. SISTEMA DE NOTIFICA√á√ïES",
      "item": [
        {
          "name": "4.1 Listar Notifica√ß√µes (Inicial)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/notifications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications"]
            },
            "description": "Lista todas as notifica√ß√µes existentes no sistema."
          }
        },
        {
          "name": "4.2 Criar Notifica√ß√£o de Entrada",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Notifica√ß√£o criada', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "// Salva o ID da notifica√ß√£o para uso posterior",
                  "if (pm.response.code === 201) {",
                  "    const notificationId = pm.response.text();",
                  "    pm.collectionVariables.set('notificationId', notificationId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"motoPlaca\": \"{{motoPlaca}}\",\n  \"tipoMovimentacao\": \"ENTRADA\",\n  \"timestampEvento\": \"{{$isoTimestamp}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/notifications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications"]
            },
            "description": "Cria uma notifica√ß√£o de entrada de moto. Demonstra:\n- Sistema de notifica√ß√µes funcionando\n- Timestamp autom√°tico\n- Integra√ß√£o com SignalR (tempo real)"
          }
        },
        {
          "name": "4.3 Criar Notifica√ß√£o de Sa√≠da",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"motoPlaca\": \"{{motoPlaca}}\",\n  \"tipoMovimentacao\": \"SAIDA\",\n  \"timestampEvento\": \"{{$isoTimestamp}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/notifications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications"]
            },
            "description": "Cria uma notifica√ß√£o de sa√≠da de moto."
          }
        },
        {
          "name": "4.4 Listar Notifica√ß√µes (Final)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/notifications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "notifications"]
            },
            "description": "Lista todas as notifica√ß√µes ap√≥s cria√ß√£o para mostrar o hist√≥rico."
          }
        }
      ],
      "description": "Sistema completo de notifica√ß√µes em tempo real"
    },
    {
      "name": "üß™ 5. TESTES DE VALIDA√á√ÉO",
      "item": [
        {
          "name": "5.1 Teste Valida√ß√£o - Moto sem Cor (Erro Esperado)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Valida√ß√£o funcionando - Bad Request', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Mensagem de erro presente', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('errors');",
                  "    pm.expect(response.errors).to.have.property('Cor');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"placa\": \"XYZ9999\",\n  \"modelo\": \"Yamaha MT-07\",\n  \"ano\": 2023\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/motos",
              "host": ["{{baseUrl}}"],
              "path": ["api", "motos"]
            },
            "description": "Teste de valida√ß√£o: tenta criar moto sem cor obrigat√≥ria.\nDeve retornar 400 Bad Request com mensagem de erro espec√≠fica."
          }
        },
        {
          "name": "5.2 Teste Busca - Moto Inexistente (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Moto n√£o encontrada - 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/motos/INEXISTENTE999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "motos", "INEXISTENTE999"]
            },
            "description": "Teste de busca por moto inexistente. Deve retornar 404 Not Found."
          }
        }
      ],
      "description": "Testes de valida√ß√£o e tratamento de erros"
    },
    {
      "name": "üßπ 6. LIMPEZA (OPCIONAL)",
      "item": [
        {
          "name": "6.1 Deletar Moto de Teste",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/motos/{{motoPlaca}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "motos", "{{motoPlaca}}"]
            },
            "description": "Remove a moto de teste criada durante a demonstra√ß√£o."
          }
        }
      ],
      "description": "Limpeza dos dados de teste (opcional)"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script executado antes de cada request",
          "console.log('üöÄ Executando request para: ' + pm.request.name);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Script executado ap√≥s cada request",
          "console.log('‚úÖ Request conclu√≠do: ' + pm.request.name);",
          "console.log('üìä Status: ' + pm.response.status + ' ' + pm.response.code);"
        ]
      }
    }
  ]
}