// Port√£o da API - Gateway dos par√ßa üö™
// TODO: depois vou melhorar isso aqui, t√° meio gambiarra mas funciona n√©
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using Ocelot.DependencyInjection;
using Ocelot.Middleware;
using System.Text;

var construtorApp = WebApplication.CreateBuilder(args);

// Adicionando os bagulho no container (DI √© vida)
construtorApp.Services.AddControllers();
construtorApp.Services.AddEndpointsApiExplorer();
construtorApp.Services.AddSwaggerGen(); // swagger √© amor ‚ù§Ô∏è

// Autentica√ß√£o JWT - porque seguran√ßa √© importante n√© galera
// FIXME: essa chave secreta t√° hardcoded, depois mudo pra vari√°vel de ambiente
var configuracoesJwt = construtorApp.Configuration.GetSection("ConfiguracoesJwt");
var chaveSecreta = configuracoesJwt["ChaveSecreta"] ?? "EstacionamentoChaveSecreta2025!@#MuitoSegura$%^&*()"; // senha123 era muito √≥bvio kkkk

construtorApp.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(opcoes =>
    {
        // Configura√ß√µes do JWT - copiei do Stack Overflow e funcionou ü§∑‚Äç‚ôÇÔ∏è
        opcoes.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true, // token n√£o pode ser eterno n√©
            ValidateIssuerSigningKey = true,
            ValidIssuer = configuracoesJwt["Emissor"] ?? "PortaoEstacionamentoAPI",
            ValidAudience = configuracoesJwt["Audiencia"] ?? "ClientesEstacionamento",
            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(chaveSecreta))
        };
    });

// Health Checks - pra saber se t√° vivo ou morto
construtorApp.Services.AddHealthChecks();

// Ocelot - o cara que faz a m√°gica do gateway acontecer
// NOTA: se der pau aqui, √© porque o ocelot.json t√° zoado
construtorApp.Configuration.AddJsonFile("ocelot.json", optional: false, reloadOnChange: true);
construtorApp.Services.AddOcelot();

// CORS liberado pra geral - depois vou restringir isso (talvez)
construtorApp.Services.AddCors(opcoes =>
{
    opcoes.AddPolicy("LiberaGeral", politica =>
    {
        politica.AllowAnyOrigin()      // qualquer origem pode acessar
              .AllowAnyMethod()        // GET, POST, PUT, DELETE, whatever
              .AllowAnyHeader();       // headers liberados
    });
});

var aplicacao = construtorApp.Build();

// Configurando o pipeline HTTP - a ordem importa aqui galera!
if (aplicacao.Environment.IsDevelopment())
{
    aplicacao.UseSwagger();    // documenta√ß√£o autom√°tica, que maravilha
    aplicacao.UseSwaggerUI();  // interface bonitinha do swagger
}

aplicacao.UseHttpsRedirection(); // for√ßa HTTPS porque HTTP √© coisa do passado
aplicacao.UseCors("LiberaGeral"); // CORS que configuramos ali em cima

aplicacao.UseAuthentication(); // primeiro autentica
aplicacao.UseAuthorization();  // depois autoriza (ordem importa!)

// Endpoint pra saber se t√° funcionando - tipo um "t√¥ vivo"
aplicacao.MapHealthChecks("/saude");

// Endpoint de login - gambiarra b√°sica mas funciona
// TODO: depois implementar direito com banco de dados e hash da senha
aplicacao.MapPost("/api/auth/entrar", async (PedidoLogin pedido) =>
{
    // Autentica√ß√£o super segura kkkk (NOT!)
    // HACK: usu√°rio e senha hardcoded, depois vou fazer direito... talvez
    if (pedido.NomeUsuario == "admin" && pedido.Senha == "password") // senha123 era muito √≥bvio
    {
        var manipuladorToken = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var chave = Encoding.UTF8.GetBytes(chaveSecreta);
        var descricaoToken = new SecurityTokenDescriptor
        {
            Subject = new System.Security.Claims.ClaimsIdentity(new[]
            {
                new System.Security.Claims.Claim("nomeUsuario", pedido.NomeUsuario),
                new System.Security.Claims.Claim("papel", "admin") // todo mundo √© admin por enquanto üòÖ
            }),
            Expires = DateTime.UtcNow.AddHours(24), // token v√°lido por 24h - generoso n√©
            Issuer = configuracoesJwt["Emissor"] ?? "PortaoEstacionamentoAPI",
            Audience = configuracoesJwt["Audiencia"] ?? "ClientesEstacionamento",
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(chave), SecurityAlgorithms.HmacSha256Signature)
        };

        var token = manipuladorToken.CreateToken(descricaoToken);
        var tokenString = manipuladorToken.WriteToken(token);

        return Results.Ok(new { Token = tokenString, ExpiraEm = descricaoToken.Expires });
    }

    return Results.Unauthorized(); // vai tomar no... ops, n√£o autorizado!
});

// Ocelot √© o cora√ß√£o do gateway - sem ele n√£o rola
// FIXME: √†s vezes demora pra carregar, investigar depois
await aplicacao.UseOcelot();

aplicacao.Run(); // BORA RODAR ESSA BAGA√áA! üöÄ

// Record pra receber os dados de login - C# 9 √© vida ‚ù§Ô∏è
public record PedidoLogin(string NomeUsuario, string Senha);